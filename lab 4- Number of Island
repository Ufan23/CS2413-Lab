// Helper function to “sink” the island via DFS
static void dfs(char** grid, int r, int c, int rows, int cols) {
    // boundary or water check
    if (r < 0 || r >= rows || c < 0 || c >= cols || grid[r][c] != '1')
        return;
    // mark this cell as visited
    grid[r][c] = '0';
    // explore four directions
    dfs(grid, r + 1, c,     rows, cols);
    dfs(grid, r - 1, c,     rows, cols);
    dfs(grid, r,     c + 1, rows, cols);
    dfs(grid, r,     c - 1, rows, cols);
}

int numIslands(char** grid, int gridSize, int* gridColSize) {
    if (gridSize == 0) return 0;
    int rows  = gridSize;
    int cols  = gridColSize[0];  // assume each row has the same number of columns
    int count = 0;

    for (int r = 0; r < rows; r++) {
        for (int c = 0; c < cols; c++) {
            // whenever we find land, that's a new island
            if (grid[r][c] == '1') {
                count++;
                // sink the entire connected land mass
                dfs(grid, r, c, rows, cols);
            }
        }
    }
    return count;
}
